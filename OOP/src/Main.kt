import java.net.DatagramPacket
import java.net.DatagramSocket
import java.net.InetAddress
import java.net.SocketTimeoutException

// ‚úÖ N√≠vel 1 ‚Äî Fundamentos (Simples)
// üü¢ Exerc√≠cio 1: Criar uma classe simples
// Crie uma classe Pessoa com os atributos nome e idade,
// e um metodo apresentar() que imprime "Ol√°, meu nome √© X e tenho Y anos".

/**
 * Classe que representa uma pessoa com nome e idade.
 *
 * Exemplo de uso:
 * ```
 * val pessoa = Pessoa("Maria", 32) // instancia a classe Pessoa
 * pessoa.apresentar()              // chama o m√©todo apresentar()
 * ```
 */
class Pessoa(val nome: String, val idade: Int) {
    fun apresentar() {
        println("Ol√°, meu nome √© $nome e tenho $idade anos")
    }
}

// üü¢ Exerc√≠cio 2: Classe com construtor secund√°rio
//Crie uma classe Produto com nome e preco,
// e um construtor secund√°rio que permite
// criar um produto com preco = 0.0 por padr√£o.

/**
 * Representa um produto com nome e pre√ßo.
 * nome Nome do produto.
 * preco Pre√ßo do produto.
 *
 * Cria um [Produto] com nome e pre√ßo informados.
 * Cria um [Produto] com nome e pre√ßo padr√£o 0.0.
 *
 * Exemplo de uso:
 * ```
 * val p1 = Produto("Caneta", 2.50)  // usa o construtor prim√°rio
 * val p2 = Produto("L√°pis")         // usa o construtor secund√°rio com preco = 0.0
 * ```
 *
 * Construtor secund√°rio que define o pre√ßo como 0.0 por padr√£o.
 *
 */
class Produto(val nome: String, val preco: Double) {
    constructor(nome: String) : this(nome, 0.0)
}

// üü¢ Exerc√≠cio 3: Classe com metodo que altera o estado
// Crie uma classe ContaBancaria com saldo, e m√©todos
// depositar(valor: Double) e sacar(valor: Double).

/**
 * Representa uma conta banc√°ria com um saldo atual.
 *
 * Exemplo de uso:
 * ```
 * var conta = ContaBancaria(100.0)
 * conta.depositar(50.0)
 * println(conta.saldo) // 150.0
 * conta.sacar(30.0)
 * println(conta.saldo) // 120.0
 * ```
 */
class ContaBancaria(var saldo: Double) {

    fun depositar(valor: Double) {
        if (valor > 0) {
            saldo += valor
        }

    }

    fun sacar(valor: Double) {
        if (valor > 0 && valor <= saldo) {
            saldo -= valor
        }
    }
}

// ‚úÖ N√≠vel 2 ‚Äî Heran√ßa, Polimorfismo, Encapsulamento
// üü° Exerc√≠cio 4: Heran√ßa e override
// Crie uma classe Animal com o metodo fazerSom(),
// e duas subclasses Cachorro e Gato que sobrescrevem esse metodo.

/**
 *  ‚Äî Heran√ßa, Polimorfismo, Encapsulamento
 * Heran√ßa e override
 *
 * Este exerc√≠cio demonstra o uso de heran√ßa em Kotlin, onde uma classe base chamada [Animal]
 * define um comportamento gen√©rico atrav√©s do metodo [fazerSom].
 * As classes [Cachorro] e [Gato] herdam de [Animal] e sobrescrevem o metodo [fazerSom] para
 * fornecer sons espec√≠ficos para cada tipo de animal.
 *
 * Classes:
 * - Animal: Classe base com metodo gen√©rico que pode ser sobrescrito.
 *
 * ```
 * open class Animal() {
 *     open fun fazerSom() {
 *         println("Som Generico do Animal")
 *     }
 * }
 * ```
 *
 * - Cachorro: Subclasse de Animal que representa um cachorro e emite um latido.
 *
 * ```
 * class Cachorro(): Animal() {
 *     override fun fazerSom() {
 *         println("Som do Cachorro Au Auuu...")
 *     }
 * }
 * ```
 *
 * - Gato: Subclasse de Animal que representa um gato e emite um miado.
 *
 * ```
 * class Gato(): Animal() {
 *     override fun fazerSom() {
 *         println("Som do Gato Miau Miauuu...")
 *     }
 * ```
 *
 * M√©todos:
 * - fazerSom(): Metodo que representa o som do animal. √â sobrescrito nas subclasses.
 *
 * Exemplo de uso:
 * ```
 * val cachorro = Cachorro()
 * cachorro.fazerSom() // Sa√≠da: Som do Cachorro: Au Auuu...
 *
 * val gato = Gato()
 * gato.fazerSom()     // Sa√≠da: Som do Gato: Miau Miauuu...
 * ```
 */
open class Animal() {
    open fun fazerSom() {
        println("Som Generico do Animal")
    }
}

class Cachorro() : Animal() {
    override fun fazerSom() {
        println("Som do Cachorro Au Auuu...")
    }
}

class Gato() : Animal() {
    override fun fazerSom() {
        println("Som do Gato Miau Miauuu...")
    }
}

// üü° Exerc√≠cio 5: Modificadores de visibilidade
// Na classe ContaBancaria, torne o saldo private e
// crie um metodo p√∫blico mostrarSaldo() para exibir o valor.

/**
 * Representa uma conta banc√°ria com saldo protegido (encapsulado).
 *
 * O saldo √© privado e s√≥ pode ser acessado ou alterado
 * por meio dos m√©todos p√∫blicos fornecidos pela classe.
 *
 * ```
 * private var saldo: Double
 * val conta = ContaBancaria(100.0)
 * conta.saldo = 200.0 // ‚ùå Isso n√£o compila!
 *```
 *
 * Funcionalidades:
 * - mostrarSaldo(): retorna o valor atual do saldo.
 * - depositar(valor): adiciona um valor ao saldo, se for positivo.
 * - sacar(valor): subtrai um valor do saldo, se for positivo e n√£o exceder o saldo dispon√≠vel.
 *
 * Exemplo de uso:
 * ```
 * val conta = Conta_Bancaria(100.0)
 * conta.depositar(50.0)
 * conta.sacar(30.0)
 * println(conta.mostrarSaldo()) // Sa√≠da: 120.0
 * ```
 */
class Conta_Bancaria(private var saldo: Double) {

    fun mostrarSaldo(): Double {
        return saldo
    }

    fun depositar(valor: Double) {
        if (valor > 0) {
            saldo += valor
        }

    }

    fun sacar(valor: Double) {
        if (valor > 0 && valor <= saldo) {
            saldo -= valor
        }
    }
}

// üü° Exerc√≠cio 6: Classe data
// Crie uma data class chamada Livro com os atributos titulo,
// autor e ano. Depois, compare dois livros com == e imprima o resultado.
/**
 * üü° Exerc√≠cio 6: Classe data
 *
 * Esta atividade demonstra o uso de uma data class em Kotlin.
 *
 * A classe `Livro` √© uma `data class` que representa um livro com tr√™s propriedades:
 * - `titulo`: o t√≠tulo do livro.
 * - `autor`: o autor do livro.
 * - `ano`: o ano de publica√ß√£o.
 *
 * Objetivo:
 * Criar dois objetos da classe `Livro` com valores diferentes e compar√°-los usando `==`.
 * A compara√ß√£o em `data class` verifica se os dados (valores dos atributos) s√£o iguais,
 * e n√£o apenas se s√£o o mesmo objeto na mem√≥ria.
 *
 * Exemplo de comportamento:
 * ```
 * val livro1 = Livro("Kotlin", "Roni", 2020)
 * val livro2 = Livro("Java", "Maria", 2010)
 * val resultado = livro1 == livro2  // retorna false
 * ```
 *
 * A compara√ß√£o retorna `false` porque os dados dos dois objetos s√£o diferentes.
 *
 * Se os dados fossem iguais:
 * ```
 * val livro3 = Livro("Kotlin", "Roni", 2020)
 * println(livro1 == livro3) // retorna true
 * ```
 */
data class Livro(
    val titulo: String,
    val autor: String,
    val ano: Int
)

// üü° Exerc√≠cio 7: Enum
//Crie uma enum class chamada DiaSemana com os dias da semana,
//e uma fun√ß√£o que imprime uma mensagem diferente dependendo do dia.

/**
 *  Exerc√≠cio 7: Enum
 *
 * Este exerc√≠cio demonstra o uso de `enum class` em Kotlin para representar os dias da semana.
 *
 * A `enum class DiaSemana` define constantes para cada dia da semana:
 * - Segunda, Ter√ßa, Quarta, Quinta, Sexta, Sabado, Domingo
 *
 * Tamb√©m √© criada uma fun√ß√£o chamada `mensagemDia(dia: DiaSemana)`, que recebe um valor da enumera√ß√£o
 * e imprime uma mensagem diferente dependendo do dia da semana.
 *
 * Isso mostra como usar `when` para executar diferentes blocos de c√≥digo com base em valores de enum.
 *
 * Exemplo de uso:
 * ```
 * val dia = DiaSemana.Domingo
 * mensagemDia(dia) // Sa√≠da: "Prepare-se para a segunda."
 * ```
 *
 * Observa√ß√£o:
 * - O uso de letras acentuadas (como √ß) em nomes de enums n√£o √© recomendado em c√≥digo real por quest√µes de compatibilidade.
 *   Uma alternativa seria usar "Terca" em vez de "Ter√ßa".
 */
enum class DiaSemana {
    Segunda,
    Ter√ßa,
    Quarta,
    Quinta,
    Sexta,
    Sabado,
    Domingo
}

fun menssagemDia(dia: DiaSemana) {
    when (dia) {
        DiaSemana.Segunda -> println("Come√ßo de semana!")
        DiaSemana.Ter√ßa -> println("Ainda √© ter√ßa...")
        DiaSemana.Quarta -> println("Meio da semana!")
        DiaSemana.Quinta -> println("Quase l√°!")
        DiaSemana.Sexta -> println("Sextou!")
        DiaSemana.Sabado -> println("Dia de descanso!")
        DiaSemana.Domingo -> println("Prepare-se para a segunda.")
    }
}

// ‚úÖ N√≠vel 3 ‚Äî Abstra√ß√£o, Interface, Objetos
//üü† Exerc√≠cio 8: Classe abstrata
//Crie uma classe abstrata FormaGeometrica com um metodo calcularArea().
// Crie duas classes: Quadrado e Circulo, que implementam o metodo.

/**
 *
 * Este exerc√≠cio demonstra o uso de abstra√ß√£o em Kotlin.
 *
 * A classe abstrata `FormaGeometrica` define um m√©todo abstrato `calcularArea()`,
 * que deve ser implementado por todas as classes que herdarem dela.
 *
 * Classes concretas:
 * - `Quadrado`: recebe o lado como par√¢metro e implementa o c√°lculo da √°rea (lado √ó lado).
 * - `Circulo`: recebe o raio como par√¢metro e implementa o c√°lculo da √°rea (œÄ √ó raio¬≤).
 *
 * Exemplo de uso:
 * ```
 * val q = Quadrado(4.0)
 * val c = Circulo(3.0)
 * println(q.calcularArea())  // 16.0
 * println(c.calcularArea())  // 28.27...
 * ```
 *
 * Isso mostra como diferentes formas podem compartilhar uma interface comum (`calcularArea`)
 * mesmo que a l√≥gica de c√°lculo seja diferente.
 */
// Classe abstrata com metodo abstrato
abstract class FormaGeometrica {
    abstract fun calcularArea(): Double
}

// Classe Quadrado que herda de FormaGeometrica
class Quadrado(val lado: Double) : FormaGeometrica() {
    override fun calcularArea(): Double {
        return lado * lado
    }
}

// Classe Circulo que herda de FormaGeometrica
class Circulo(val raio: Double) : FormaGeometrica() {
    override fun calcularArea(): Double {
        return Math.PI * raio * raio
    }
}

// üü† Exerc√≠cio 9: Interface
//Crie uma interface chamada Imprimivel com um metodo imprimir().
//Crie classes Documento e Imagem que implementam essa interface.

/**
 *
 * Este exemplo demonstra o uso de uma interface chamada `Imprimivel`
 * que define um metodo abstrato `imprimir()`.
 *
 * As classes `Documento` e `Imagem` implementam a interface e fornecem
 * sua pr√≥pria l√≥gica para imprimir.
 *
 * Exemplo de uso:
 * ```
 * val doc = Documento("Contrato.pdf")
 * val img = Imagem("Foto.png")
 *
 * doc.imprimir()  // Sa√≠da: Imprimindo documento: Contrato.pdf
 * img.imprimir()  // Sa√≠da: Imprimindo imagem: Foto.png
 * ```
 *
 * Isso ilustra o conceito de polimorfismo com interfaces em Kotlin.
 */

// Interface com um metodo
interface Imprimivel {
    fun imprimir()
}

// Classe Documento que implementa Imprimivel
class Documento(val nome: String) : Imprimivel {
    override fun imprimir() {
        println("Imprimindo documento: $nome")
    }
}

// Classe Imagem que implementa Imprimivel
class Imagem(val arquivo: String) : Imprimivel {
    override fun imprimir() {
        println("Imprimindo imagem: $arquivo")
    }
}

// üü† Exerc√≠cio 10: Singleton com object
//Crie um object chamado Config com uma vari√°vel
// idioma e uma fun√ß√£o exibirConfiguracao().

/**
 *
 * Este exemplo utiliza o `object` Kotlin para criar um Singleton chamado `Config`.
 * Ele possui uma vari√°vel `idioma` e uma fun√ß√£o `exibirConfiguracao()` que mostra o idioma atual.
 *
 * Exemplo de uso:
 * ```
 * Config.exibirConfiguracao()     // Exibe o idioma padr√£o
 * Config.idioma = "Ingl√™s"        // Modifica o idioma
 * Config.exibirConfiguracao()     // Exibe o novo idioma
 * ```
 *
 * Como `object` √© um Singleton, ele garante que `Config` ter√° apenas uma inst√¢ncia global no app.
 */

object Config {
    var idioma: String = "Portugues"

    fun exibirConfiguracao() {
        println("Idioma atual: $idioma")
    }
}

// üü† Exerc√≠cio 11: companion object
// Crie uma classe Matematica com um
// companion object que tenha uma fun√ß√£o somar(a, b).

/**
 *
 * A classe `Matematica` cont√©m um `companion object` que fornece
 * uma fun√ß√£o utilit√°ria `somar(a, b)`, acess√≠vel diretamente pela classe.
 *
 * Exemplo de uso:
 * ```
 * val resultado = Matematica.somar(5, 3)
 * println(resultado) // 8
 * ```
 *
 * O uso de `companion object` permite acessar `somar` sem precisar instanciar `Matematica`.
 */
class Matematica() {
    companion object {
        fun somar(a: Int, b: Int): Int {
            return a + b
        }
    }
}

// ‚úÖ N√≠vel 4 ‚Äî Avan√ßado
// üî¥ Exerc√≠cio 12: Classe gen√©rica
// Crie uma classe gen√©rica Caixa<T> que armazena um valor
// de qualquer tipo e imprime seu conte√∫do.

/**
 *
 * A classe `Caixa<T>` √© gen√©rica e pode armazenar valores de qualquer tipo.
 * Ela possui um metodo `imprimir()` que exibe o conte√∫do armazenado.
 *
 * Exemplo de uso:
 * ```
 * val caixaInt = Caixa(10)
 * val caixaTexto = Caixa("Texto")
 * caixaInt.imprimir()     // Conte√∫do da caixa: 10
 * caixaTexto.imprimir()   // Conte√∫do da caixa: Texto
 * ```
 *
 * A utiliza√ß√£o de generics (`<T>`) permite reuso com tipos diferentes sem duplicar c√≥digo.
 */
class Caixa<T>(private val valor: T) {
    fun imprimir() {
        println("Conte√∫do da caixa: $valor")
    }
}

// üî¥ Exerc√≠cio 13: Inner class
// Crie uma classe Computador com uma inner class chamada Processador,
// que acessa uma propriedade da classe externa.

/**
 *
 * A classe `Computador` representa um computador com uma marca.
 * A inner class `Processador` representa um processador associado a esse computador.
 * Por ser `inner`, a classe `Processador` pode acessar as propriedades da classe `Computador`.
 *
 * Exemplo de uso:
 * ```
 * val computador = Computador("Dell")
 * val processador = computador.Processador("Intel i7")
 * processador.exibirInfo()  // Sa√≠da: Computador da marca: Dell, com processador: Intel i7
 * ```
 */
class Computador(val marca: String) {

    inner class Processador(val modelo: String) {

        fun exibirInfo() {
            println("Computador da Marca: $marca, com processador: $modelo")
        }
    }
}

// üî¥ Exerc√≠cio 14: Sobrecarga de m√©todos
// Crie uma classe Mensagem com dois m√©todos enviar():
// um que recebe uma String, e outro que recebe String + destinatario.

/**
 *
 * A classe `Mensagem` demonstra o conceito de sobrecarga, onde dois m√©todos com o mesmo nome
 * `enviar()` executam a√ß√µes diferentes dependendo dos par√¢metros.
 *
 * M√©todos:
 * - `enviar(texto: String)` ‚Üí Envia apenas o conte√∫do da mensagem.
 * - `enviar(texto: String, destinatario: String)` ‚Üí Envia o conte√∫do da mensagem para um destinat√°rio espec√≠fico.
 *
 * Exemplo de uso:
 * ```
 * val msg = Mensagem()
 * msg.enviar("Ol√°!")                       // Sa√≠da: Enviando mensagem: "Ol√°!"
 * msg.enviar("Bom dia!", "Jo√£o")          // Sa√≠da: Enviando mensagem para Jo√£o: "Bom dia!"
 * ```
 */
class Mensagem {

    fun enviar(texto: String) {
        println("Enviando mensagem: \"$texto\"")
    }

    fun enviar(texto: String, destinatario: String) {
        println("Enviando mensagem para $destinatario: \"$texto\"")
    }
}

// üî¥ Exerc√≠cio 15: Simula√ß√£o de sistema
// Crie um mini sistema de cadastro de alunos com:
// Classe Aluno(nome, nota)
// Classe Turma, que cont√©m uma lista de alunos e m√©todos para:
// Adicionar alunos
// Calcular m√©dia da turma
// Listar aprovados (nota >= 7)

/**
 *
 * Objetivo:
 * Criar um mini sistema de cadastro de alunos com:
 *
 * - Classe Aluno com nome e nota.
 * - Classe Turma que gerencia uma lista de alunos e oferece:
 *      - adicionarAluno(): adiciona um novo aluno √† turma.
 *      - calcularMedia(): retorna a m√©dia das notas da turma.
 *      - listarAprovados(): retorna os alunos com nota maior ou igual a 7.
 *
 * Exemplo de uso:
 * ```
 * val turma = Turma()
 * turma.adicionarAluno(Aluno("Ana", 8.5))
 * turma.adicionarAluno(Aluno("Carlos", 6.0))
 * turma.calcularMedia() // retorna m√©dia da turma
 * turma.listarAprovados() // lista apenas os alunos com nota >= 7
 * ```
 */

data class Aluno(
    val nome: String,
    val nota: Double
)

class Turma() {
    private val alunos = mutableListOf<Aluno>()

    fun adicionarAluno(aluno: Aluno) {
        alunos.add(aluno)
    }

    // Calcula a m√©dia de notas da turma
    fun calcularMedia(): Double {
        if (alunos.isEmpty()) return 0.0
        return alunos.map { it.nota }.average()
    }

    // Retorna lista de alunos aprovados (nota >= 7.0)
    fun listarAprovados(): List<Aluno> {
        return alunos.filter { it.nota >= 7.0 }
    }
}

fun main() {

    }
